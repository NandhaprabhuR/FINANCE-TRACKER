import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:moneynest/screen/home.dart' as home_screen;
import 'package:moneynest/screen/signup.dart';
import 'package:provider/provider.dart';
import 'package:moneynest/models.dart';
import 'package:intl/intl.dart';
import 'package:google_fonts/google_fonts.dart';
import 'screen/history.dart';
import 'screen/login.dart';
import 'screen/motives.dart';
import 'screen/transactions.dart';
import 'screen/dataprovider.dart';
import 'screen/profile.dart';
import 'firebase_options.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter_gemini/flutter_gemini.dart';

// AI Assistant Screen for Gemini API interaction using flutter_gemini
class AIAssistantScreen extends StatefulWidget {
  final Gemini gemini;

  const AIAssistantScreen({super.key, required this.gemini});

  @override
  _AIAssistantScreenState createState() => _AIAssistantScreenState();
}

class _AIAssistantScreenState extends State<AIAssistantScreen> {
  final TextEditingController _controller = TextEditingController();
  String _response = '';
  bool _isLoading = false;

  void _generateContent() async {
    if (_controller.text.trim().isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Please enter a prompt'),
          backgroundColor: const Color(0xFFE57373),
        ),
      );
      return;
    }

    setState(() {
      _isLoading = true;
      _response = '';
    });

    try {
      String financePrompt =
          "You are a financial assistant. Only respond to queries related to finance, budgeting, investments, or financial planning. If the query is unrelated to finance, politely decline and ask for a finance-related question. Here is the user's query: ${_controller.text}";

      final response = await widget.gemini.text(financePrompt).timeout(
        const Duration(seconds: 10),
        onTimeout: () {
          throw Exception("Request to Gemini API timed out");
        },
      );
      if (response == null || response.output == null) {
        throw Exception("No content generated by Gemini API");
      }

      String formattedResponse = _formatResponse(response.output!);
      setState(() {
        _response = formattedResponse;
      });
      debugPrint("Gemini API response: $_response");
    } catch (e) {
      debugPrint("Gemini API request failed: $e");
      setState(() {
        _response = 'Error: $e';
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Failed to get AI response: $e'),
          backgroundColor: const Color(0xFFE57373),
        ),
      );
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  String _formatResponse(String rawResponse) {
    List<String> lines = rawResponse.split('\n').map((line) => line.trim()).toList();
    StringBuffer formatted = StringBuffer();
    bool inList = false;

    for (String line in lines) {
      if (line.isEmpty) continue;
      if (line.startsWith('**') && line.endsWith('**')) {
        if (inList) {
          inList = false;
        }
        String heading = line.replaceAll('**', '').trim();
        formatted.writeln('$heading\n');
      } else if (line.startsWith('*') || line.startsWith('-')) {
        inList = true;
        String bulletContent = line.substring(1).trim();
        formatted.writeln('â€¢ $bulletContent');
      } else {
        if (inList) {
          inList = false;
        }
        formatted.writeln('$line\n');
      }
    }

    return formatted.toString().trim();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'AI Financial Assistant',
            style: GoogleFonts.poppins(
              fontSize: 24,
              fontWeight: FontWeight.w600,
            ),
          ),
          const SizedBox(height: 16),
          TextField(
            controller: _controller,
            decoration: InputDecoration(
              labelText: 'Ask about your finances...',
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(16),
              ),
            ),
            maxLines: 3,
          ),
          const SizedBox(height: 16),
          ElevatedButton(
            onPressed: _isLoading ? null : _generateContent,
            child: Text(_isLoading ? 'Loading...' : 'Ask AI'),
          ),
          const SizedBox(height: 16),
          Expanded(
            child: SingleChildScrollView(
              child: Text(
                _response,
                style: GoogleFonts.inter(
                  fontSize: 16,
                  height: 1.5,
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}

// ThemeProvider to manage theme state
class ThemeProvider with ChangeNotifier {
  bool _isDarkMode = false;
  bool get isDarkMode => _isDarkMode;

  ThemeProvider() {
    _loadTheme();
  }

  Future<void> _loadTheme() async {
    final prefs = await SharedPreferences.getInstance();
    _isDarkMode = prefs.getBool('isDarkMode') ?? false;
    notifyListeners();
  }

  Future<void> toggleTheme() async {
    _isDarkMode = !_isDarkMode;
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('isDarkMode', _isDarkMode);
    notifyListeners();
  }
}

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  const apiKey = 'AIzaSyAmsBGo5LiIcOKAA22ES-nS_JXYGsrTsdU';
  try {
    await Gemini.init(apiKey: apiKey);
    debugPrint("Gemini initialized successfully in main");
  } catch (e) {
    debugPrint("Failed to initialize Gemini: $e");
  }
  final gemini = Gemini.instance;

  try {
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    ).timeout(const Duration(seconds: 10), onTimeout: () {
      throw Exception("Firebase initialization timed out");
    });
    debugPrint("Firebase initialized successfully");
  } catch (e) {
    debugPrint("Firebase initialization failed: $e");
    runApp(FirebaseErrorApp(error: e.toString()));
    return;
  }

  SystemChrome.setEnabledSystemUIMode(SystemUiMode.immersiveSticky);

  runApp(
    MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (context) => DataProvider()),
        ChangeNotifierProvider(create: (context) => ThemeProvider()),
      ],
      child: MyApp(gemini: gemini),
    ),
  );
}

class FirebaseErrorApp extends StatelessWidget {
  final String error;

  const FirebaseErrorApp({required this.error, super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: Scaffold(
        body: Center(
          child: Padding(
            padding: const EdgeInsets.all(32.0),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Container(
                  padding: const EdgeInsets.all(24),
                  decoration: BoxDecoration(
                    color: const Color(0xFFFEE8E8),
                    borderRadius: BorderRadius.circular(24),
                  ),
                  child: const Icon(
                    Icons.error_outline_rounded,
                    size: 70,
                    color: Color(0xFFE57373),
                  ),
                ),
                const SizedBox(height: 32),
                Text(
                  "Connection Issue",
                  style: GoogleFonts.poppins(
                    fontSize: 28,
                    fontWeight: FontWeight.w700,
                    letterSpacing: -0.5,
                  ),
                ),
                const SizedBox(height: 16),
                Text(
                  error,
                  textAlign: TextAlign.center,
                  style: GoogleFonts.inter(
                    fontSize: 16,
                    color: const Color(0xFF757575),
                    height: 1.5,
                    fontWeight: FontWeight.w400,
                  ),
                ),
                const SizedBox(height: 40),
                ElevatedButton(
                  onPressed: () async {
                    try {
                      await Firebase.initializeApp(
                        options: DefaultFirebaseOptions.currentPlatform,
                      ).timeout(const Duration(seconds: 10), onTimeout: () {
                        throw Exception("Firebase initialization timed out");
                      });
                      runApp(
                        MultiProvider(
                          providers: [
                            ChangeNotifierProvider(create: (context) => DataProvider()),
                            ChangeNotifierProvider(create: (context) => ThemeProvider()),
                          ],
                          child: MyApp(gemini: Gemini.instance),
                        ),
                      );
                    } catch (e) {
                      debugPrint("Firebase initialization failed: $e");
                      runApp(FirebaseErrorApp(error: e.toString()));
                    }
                  },
                  style: ElevatedButton.styleFrom(
                    minimumSize: const Size(160, 54),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(32),
                    ),
                    elevation: 0,
                    backgroundColor: const Color(0xFF4CAF50),
                  ),
                  child: Text(
                    "Retry Connection",
                    style: GoogleFonts.poppins(
                      fontWeight: FontWeight.w600,
                      fontSize: 16,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class MyApp extends StatelessWidget {
  final Gemini gemini;

  const MyApp({super.key, required this.gemini});

  ThemeData _buildLightTheme() {
    return ThemeData(
      colorScheme: ColorScheme.fromSeed(
        seedColor: const Color(0xFF4CAF50),
        brightness: Brightness.light,
        primary: const Color(0xFF4CAF50),
        secondary: const Color(0xFF8BC34A),
        surface: const Color(0xFFF8F9FA),
        error: const Color(0xFFE57373),
        onSurface: const Color(0xFF424242),
        onBackground: const Color(0xFF424242),
      ),
      textTheme: GoogleFonts.poppinsTextTheme(),
      scaffoldBackgroundColor: const Color(0xFFF8F9FA),
      appBarTheme: AppBarTheme(
        backgroundColor: Colors.transparent,
        elevation: 0,
        centerTitle: true,
        iconTheme: const IconThemeData(color: Color(0xFF4CAF50)),
        titleTextStyle: GoogleFonts.poppins(
          color: const Color(0xFF2E2E2E),
          fontSize: 20,
          fontWeight: FontWeight.w600,
          letterSpacing: -0.5,
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFF4CAF50),
          foregroundColor: Colors.white,
          minimumSize: const Size(double.infinity, 56),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20),
          ),
          elevation: 0,
          padding: const EdgeInsets.symmetric(vertical: 16),
        ),
      ),
      cardTheme: CardTheme(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(24),
        ),
        elevation: 4,
        shadowColor: Colors.black.withOpacity(0.06),
        color: Colors.white,
        margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),
      ),
      inputDecorationTheme: InputDecorationTheme(
        filled: true,
        fillColor: Colors.white,
        contentPadding: const EdgeInsets.symmetric(horizontal: 20, vertical: 16),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(16),
          borderSide: BorderSide.none,
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(16),
          borderSide: BorderSide.none,
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(16),
          borderSide: const BorderSide(color: Color(0xFF4CAF50), width: 1.5),
        ),
        errorBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(16),
          borderSide: const BorderSide(color: Color(0xFFE57373), width: 1.5),
        ),
        hintStyle: GoogleFonts.inter(
          color: const Color(0xFFAAAAAA),
          fontSize: 15,
        ),
      ),
      useMaterial3: true,
    );
  }

  ThemeData _buildDarkTheme() {
    return ThemeData(
      colorScheme: ColorScheme.fromSeed(
        seedColor: const Color(0xFF4CAF50),
        brightness: Brightness.dark,
        primary: const Color(0xFF4CAF50),
        secondary: const Color(0xFF8BC34A),
        surface: const Color(0xFF1E1E1E),
        error: const Color(0xFFE57373),
        onSurface: const Color(0xFFE0E0E0),
        onBackground: const Color(0xFFE0E0E0),
      ),
      textTheme: GoogleFonts.poppinsTextTheme().apply(
        bodyColor: const Color(0xFFE0E0E0),
        displayColor: const Color(0xFFE0E0E0),
      ),
      scaffoldBackgroundColor: const Color(0xFF121212),
      appBarTheme: AppBarTheme(
        backgroundColor: Colors.transparent,
        elevation: 0,
        centerTitle: true,
        iconTheme: const IconThemeData(color: Color(0xFF4CAF50)),
        titleTextStyle: GoogleFonts.poppins(
          color: const Color(0xFFE0E0E0),
          fontSize: 20,
          fontWeight: FontWeight.w600,
          letterSpacing: -0.5,
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFF4CAF50),
          foregroundColor: Colors.white,
          minimumSize: const Size(double.infinity, 56),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20),
          ),
          elevation: 0,
          padding: const EdgeInsets.symmetric(vertical: 16),
        ),
      ),
      cardTheme: CardTheme(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(24),
        ),
        elevation: 4,
        shadowColor: Colors.white.withOpacity(0.1),
        color: const Color(0xFF1E1E1E),
        margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),
      ),
      inputDecorationTheme: InputDecorationTheme(
        filled: true,
        fillColor: const Color(0xFF1E1E1E),
        contentPadding: const EdgeInsets.symmetric(horizontal: 20, vertical: 16),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(16),
          borderSide: BorderSide.none,
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(16),
          borderSide: BorderSide.none,
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(16),
          borderSide: const BorderSide(color: Color(0xFF4CAF50), width: 1.5),
        ),
        errorBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(16),
          borderSide: const BorderSide(color: Color(0xFFE57373), width: 1.5),
        ),
        hintStyle: GoogleFonts.inter(
          color: const Color(0xFFAAAAAA),
          fontSize: 15,
        ),
      ),
      useMaterial3: true,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Consumer<ThemeProvider>(
      builder: (context, themeProvider, child) {
        return MaterialApp(
          title: 'Financial Tracker',
          theme: _buildLightTheme(),
          darkTheme: _buildDarkTheme(),
          themeMode: themeProvider.isDarkMode ? ThemeMode.dark : ThemeMode.light,
          debugShowCheckedModeBanner: false,
          home: StreamBuilder<User?>(
            stream: FirebaseAuth.instance.authStateChanges(),
            builder: (context, snapshot) {
              if (snapshot.hasError) {
                debugPrint("Auth state error: ${snapshot.error}");
                return Scaffold(
                  body: Center(
                    child: Text(
                      "Auth Error: ${snapshot.error}",
                      style: GoogleFonts.poppins(color: Colors.red),
                    ),
                  ),
                );
              }
              if (snapshot.connectionState == ConnectionState.waiting) {
                debugPrint("Waiting for auth state...");
                return Scaffold(
                  body: Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        TweenAnimationBuilder<double>(
                          tween: Tween<double>(begin: 0.0, end: 1.0),
                          duration: const Duration(milliseconds: 800),
                          builder: (context, value, child) {
                            return Opacity(
                              opacity: value,
                              child: child,
                            );
                          },
                          child: const CircularProgressIndicator(
                            color: Color(0xFF4CAF50),
                            strokeWidth: 3,
                          ),
                        ),
                        const SizedBox(height: 24),
                        TweenAnimationBuilder<double>(
                          tween: Tween<double>(begin: 0.0, end: 1.0),
                          duration: const Duration(milliseconds: 1200),
                          builder: (context, value, child) {
                            return Opacity(
                              opacity: value,
                              child: child,
                            );
                          },
                          child: Text(
                            "Loading...",
                            style: GoogleFonts.poppins(
                              fontSize: 16,
                              fontWeight: FontWeight.w500,
                              color: const Color(0xFF4CAF50),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                );
              }
              if (snapshot.hasData) {
                debugPrint("User authenticated, user: ${snapshot.data?.uid}");
                return FutureBuilder<bool>(
                  future: () async {
                    final dataProvider = Provider.of<DataProvider>(context, listen: false);
                    try {
                      debugPrint("Fetching transactions, reminders, and goals...");
                      await Future.wait([
                        dataProvider.fetchTransactions().timeout(const Duration(seconds: 5), onTimeout: () {
                          debugPrint("fetchTransactions timed out");
                          return [];
                        }),
                        dataProvider.fetchReminders().timeout(const Duration(seconds: 5), onTimeout: () {
                          debugPrint("fetchReminders timed out");
                          return [];
                        }),
                        dataProvider.fetchGoals().timeout(const Duration(seconds: 5), onTimeout: () {
                          debugPrint("fetchGoals timed out");
                          return [];
                        }),
                      ]);
                      debugPrint("Data fetched successfully");
                      return true;
                    } catch (e) {
                      debugPrint("Data fetching failed: $e");
                      WidgetsBinding.instance.addPostFrameCallback((_) {
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                            content: Text(
                              'Failed to load data: $e. Proceeding to main screen.',
                              style: GoogleFonts.inter(),
                            ),
                            backgroundColor: const Color(0xFFE57373),
                            behavior: SnackBarBehavior.floating,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(16),
                            ),
                            margin: const EdgeInsets.all(16),
                          ),
                        );
                      });
                      return true;
                    }
                  }(),
                  builder: (context, snapshot) {
                    if (snapshot.connectionState == ConnectionState.waiting) {
                      debugPrint("Preparing data...");
                      return Scaffold(
                        body: Center(
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              const CircularProgressIndicator(
                                color: Color(0xFF4CAF50),
                                strokeWidth: 3,
                              ),
                              const SizedBox(height: 24),
                              Text(
                                "Preparing your data...",
                                style: GoogleFonts.poppins(
                                  fontSize: 16,
                                  fontWeight: FontWeight.w500,
                                  color: const Color(0xFF4CAF50),
                                ),
                              ),
                            ],
                          ),
                        ),
                      );
                    }
                    if (snapshot.hasError) {
                      debugPrint("FutureBuilder error: ${snapshot.error}");
                      return Scaffold(
                        body: Center(
                          child: Text(
                            "Error: ${snapshot.error}",
                            style: GoogleFonts.poppins(color: Colors.red),
                          ),
                        ),
                      );
                    }
                    debugPrint("Navigating to MainScreen");
                    return MainScreen(gemini: gemini);
                  },
                );
              }
              debugPrint("No user authenticated, navigating to LoginPage");
              return const LoginPage();
            },
          ),
          routes: {
            '/login': (context) => const LoginPage(),
            '/signup': (context) => const SignupPage(),
            '/main': (context) => MainScreen(gemini: gemini),
          },
        );
      },
    );
  }
}

class MainScreen extends StatefulWidget {
  final Gemini gemini;

  const MainScreen({super.key, required this.gemini});

  @override
  State<MainScreen> createState() => _MainScreenState();
}

class _MainScreenState extends State<MainScreen> with SingleTickerProviderStateMixin {
  int _selectedIndex = 0;
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;

  late List<Widget> _screens;

  @override
  void initState() {
    super.initState();
    debugPrint("Initializing MainScreen");
    _screens = [
      const TransactionForm(),
      const home_screen.Dashboard(),
      const Goals(),
      const TransactionHistory(),
      AIAssistantScreen(gemini: widget.gemini),
    ];
    _animationController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 300),
    );
    _fadeAnimation = Tween<double>(begin: 0.8, end: 1.0).animate(
      CurvedAnimation(parent: _animationController, curve: Curves.easeOut),
    );
    _animationController.forward();
  }

  final List<String> _titles = const [
    'New Transaction',
    'Dashboard',
    'Financial Goals',
    'History',
    'AI Assistant',
  ];

  @override
  void dispose() {
    debugPrint("Disposing MainScreen");
    _animationController.dispose();
    super.dispose();
  }

  void _onItemTapped(int index) {
    if (_selectedIndex != index) {
      setState(() {
        _selectedIndex = index;
      });
      _animationController.reset();
      _animationController.forward();
      debugPrint("Navigated to screen: ${_titles[index]}");
    }
  }

  @override
  Widget build(BuildContext context) {
    debugPrint("Building MainScreen, selected index: $_selectedIndex");
    return Scaffold(
      body: SafeArea(
        child: Stack(
          children: [
            Column(
              children: [
                const SizedBox(height: 60),
                Expanded(
                  child: FadeTransition(
                    opacity: _fadeAnimation,
                    child: SizedBox.expand(
                      child: _screens[_selectedIndex],
                    ),
                  ),
                ),
              ],
            ),
            // Title in the center
            Positioned(
              top: 16,
              left: 0,
              right: 0,
              child: Center(
                child: Text(
                  _titles[_selectedIndex],
                  style: GoogleFonts.poppins(
                    fontWeight: FontWeight.w600,
                    fontSize: 20,
                    color: Theme.of(context).colorScheme.onBackground,
                  ),
                ),
              ),
            ),
            // Profile Icon on the right
            Positioned(
              top: 16,
              right: 16,
              child: Material(
                color: Colors.transparent,
                child: InkWell(
                  onTap: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => const ProfilePage()),
                    );
                    debugPrint("Navigated to ProfilePage");
                  },
                  borderRadius: BorderRadius.circular(16),
                  child: Container(
                    padding: const EdgeInsets.all(10),
                    decoration: BoxDecoration(
                      color: Theme.of(context).colorScheme.primary.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(16),
                    ),
                    child: const Icon(
                      Icons.person_rounded,
                      size: 22,
                      color: Color(0xFF4CAF50),
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
      bottomNavigationBar: Container(
        decoration: BoxDecoration(
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.05),
              blurRadius: 16,
              offset: const Offset(0, -4),
            ),
          ],
        ),
        child: ClipRRect(
          borderRadius: const BorderRadius.vertical(top: Radius.circular(32)),
          child: AnimatedContainer(
            duration: const Duration(milliseconds: 300),
            child: BottomNavigationBar(
              items: <BottomNavigationBarItem>[
                BottomNavigationBarItem(
                  icon: Icon(_selectedIndex == 0
                      ? Icons.add_circle
                      : Icons.add_circle_outline_rounded),
                  label: 'Add',
                ),
                BottomNavigationBarItem(
                  icon: Icon(_selectedIndex == 1
                      ? Icons.dashboard_rounded
                      : Icons.dashboard_outlined),
                  label: 'Dashboard',
                ),
                BottomNavigationBarItem(
                  icon: Icon(_selectedIndex == 2
                      ? Icons.flag_rounded
                      : Icons.flag_outlined),
                  label: 'Goals',
                ),
                BottomNavigationBarItem(
                  icon: Icon(_selectedIndex == 3
                      ? Icons.history_rounded
                      : Icons.history_outlined),
                  label: 'History',
                ),
                BottomNavigationBarItem(
                  icon: Icon(_selectedIndex == 4
                      ? Icons.assistant_rounded
                      : Icons.assistant_outlined),
                  label: 'AI',
                ),
              ],
              currentIndex: _selectedIndex,
              selectedItemColor: const Color(0xFF4CAF50),
              unselectedItemColor: const Color(0xFF9E9E9E),
              backgroundColor: Theme.of(context).colorScheme.surface,
              type: BottomNavigationBarType.fixed,
              showSelectedLabels: true,
              showUnselectedLabels: true,
              selectedLabelStyle: GoogleFonts.inter(
                fontSize: 12,
                fontWeight: FontWeight.w600,
              ),
              unselectedLabelStyle: GoogleFonts.inter(
                fontSize: 12,
                fontWeight: FontWeight.w500,
              ),
              elevation: 0,
              onTap: _onItemTapped,
            ),
          ),
        ),
      ),
    );
  }
}